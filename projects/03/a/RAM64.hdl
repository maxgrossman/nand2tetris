// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // project the address number onto a 16 bit number.
    Add16(a[0..5]=address, a[6..15]=false,
          b[0..15]=false, out=address16bit);
    
    // get me negative 8 to subtract from 16bit address
    Or16(a[0..2]=false, a[3..15]=true, b[0..15]=false, out=negative8);

    // if subtracting 8 from the address gives me a negative number,
    // then the adress is in ram0 address space.
    Add16(a=address16bit, b=negative8, out=address16bitless8, out[15]=loadram0, out[0..2]=shift8address);
    RAM8(in=in, address=address[0..2],
         load=loadram0, out=outram0);

    // if subtracting 16 from address gives me a negative number and subtracting 8 did not, 
    // then the address is in ram1 address space.
    Add16(a=address16bitless8, b=negative8, out=address16bitless16, out[15]=less16signbit, out[0..2]=shift16address);
    Not(in=loadrom0, out=notloadram0);
    And(a=less16signbit, b=notloadram0, out=loadram1);

    RAM8(in=in, address=shift8address,
         load=loadram1, out=outram1);

    // if subtracting 24 from address gives me a negative number and subtracting 16 did not, 
    // then the address is in ram2 address space.
    Add16(a=address16bitless16, b=negative8, out=address16bitless24, out[15]=less24signbit);
    Not(in=loadrom1, out=notloadram1);
    And(a=less24signbit, b=notloadram1, out=loadram2);

    RAM8(in=in, address=shift16address,
         load=loadram2, out=outram2);
}
